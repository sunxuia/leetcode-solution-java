package q950;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import org.junit.runner.RunWith;
import util.runner.Answer;
import util.runner.LeetCodeRunner;
import util.runner.TestData;
import util.runner.data.DataExpectation;

/**
 * [Hard] 928. Minimize Malware Spread II
 * https://leetcode.com/problems/minimize-malware-spread-ii/
 *
 * (This problem is the same as Minimize Malware Spread, with the differences bolded.)
 *
 * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of
 * those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will
 * continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of
 * malware stops.
 *
 * We will remove one node from the initial list, <b> completely removing it and any connections from this node to any
 * other node.</b>  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 *
 * Example 2:
 *
 * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * Output: 1
 *
 * Example 3:
 *
 * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * Output: 1
 *
 * Note:
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 *
 * 上一题 {@link Q924_MinimizeMalwareSpread}
 *
 * 题解: 新增的条件在于加粗部分(b 标签), 这里会将点和相关边都从图中去除掉.
 */
@RunWith(LeetCodeRunner.class)
public class Q928_MinimizeMalwareSpreadII {

    /**
     * 每次从图中移除initial 中的1 个点, 然后统计共有多少个被感染了.
     */
    @Answer
    public int minMalwareSpread(int[][] graph, int[] initial) {
        final int n = graph.length;
        int res = initial[0], minCount = Integer.MAX_VALUE;
        Queue<Integer> queue = new ArrayDeque<>();
        boolean[] visited = new boolean[n];
        for (int removed : initial) {
            Arrays.fill(visited, false);
            visited[removed] = true;
            for (int i : initial) {
                queue.add(i);
            }
            int count = 0;
            while (!queue.isEmpty()) {
                int node = queue.poll();
                if (visited[node]) {
                    continue;
                }
                count++;
                visited[node] = true;
                for (int i = 0; i < n; i++) {
                    if (graph[node][i] == 1) {
                        queue.add(i);
                    }
                }
            }
            if (minCount > count || minCount == count && res > removed) {
                res = removed;
                minCount = count;
            }
        }
        return res;
    }

    @TestData
    public DataExpectation example1 = DataExpectation
            .createWith(new int[][]{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, new int[]{0, 1})
            .expect(0);

    @TestData
    public DataExpectation example2 = DataExpectation
            .createWith(new int[][]{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, new int[]{0, 1})
            .expect(1);

    @TestData
    public DataExpectation example3 = DataExpectation
            .createWith(new int[][]{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}, new int[]{0, 1})
            .expect(1);

}
