package q950;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import org.junit.runner.RunWith;
import util.runner.Answer;
import util.runner.LeetCodeRunner;
import util.runner.TestData;
import util.runner.data.DataExpectation;

/**
 * [Hard] 924. Minimize Malware Spread
 * https://leetcode.com/problems/minimize-malware-spread/
 *
 * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of
 * those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue
 * until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of
 * malware stops.
 *
 * We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If
 * multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 *
 * Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result
 * of the malware spread.
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 *
 * Example 2:
 *
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 *
 * Example 3:
 *
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 *
 * Note:
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] == 1
 * 1 <= initial.length <= graph.length
 * 0 <= initial[i] < graph.length
 *
 * 下一题 {@link Q928_MinimizeMalwareSpreadII}
 */
@RunWith(LeetCodeRunner.class)
public class Q924_MinimizeMalwareSpread {

    @Answer
    public int minMalwareSpread(int[][] graph, int[] initial) {
        final int n = graph.length;
        int[] roots = new int[n];
        for (int i = 0; i < n; i++) {
            roots[i] = i;
        }
        int[] counts = new int[n];
        Arrays.fill(counts, 1);

        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            queue.add(i);
            while (!queue.isEmpty()) {
                int p = queue.poll();
                if (visited[p]) {
                    continue;
                }
                visited[p] = true;
                roots[p] = getRoot(roots, i);
                counts[roots[p]] += counts[p];
                for (int j = 0; j < n; j++) {
                    if (graph[p][j] == 1) {
                        queue.add(j);
                    }
                }
            }
        }

        int[] times = new int[n];
        int res = initial[0], resRoot = -1;
        for (int i : initial) {
            times[getRoot(roots, i)]++;
            res = Math.min(res, i);
        }
        for (int i : initial) {
            int root = getRoot(roots, i);
            if (times[root] == 1) {
                if (resRoot == -1
                        || counts[resRoot] < counts[root]
                        || counts[resRoot] == counts[root] && res > i) {
                    res = i;
                    resRoot = root;
                }
            }
        }
        return res;
    }

    private int getRoot(int[] roots, int i) {
        if (roots[i] == i) {
            return i;
        }
        return roots[i] = getRoot(roots, roots[i]);
    }

    @TestData
    public DataExpectation example1 = DataExpectation
            .createWith(new int[][]{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, new int[]{0, 1})
            .expect(0);

    @TestData
    public DataExpectation example2 = DataExpectation
            .createWith(new int[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, new int[]{0, 2})
            .expect(0);

    @TestData
    public DataExpectation example3 = DataExpectation
            .createWith(new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, new int[]{1, 2})
            .expect(1);

    @TestData
    public DataExpectation normal1 = DataExpectation
            .createWith(new int[][]{
                    {1, 0, 0, 0, 0, 0},
                    {0, 1, 0, 0, 0, 0},
                    {0, 0, 1, 0, 0, 0},
                    {0, 0, 0, 1, 1, 0},
                    {0, 0, 0, 1, 1, 0},
                    {0, 0, 0, 0, 0, 1}}, new int[]{5, 0})
            .expect(0);

    @TestData
    public DataExpectation normal2 = DataExpectation
            .createWith(new int[][]{
                    {1, 0, 0, 0, 1, 0, 0, 0},
                    {0, 1, 1, 0, 0, 1, 0, 0},
                    {0, 1, 1, 0, 1, 0, 0, 0},
                    {0, 0, 0, 1, 1, 0, 0, 0},
                    {1, 0, 1, 1, 1, 0, 0, 1},
                    {0, 1, 0, 0, 0, 1, 0, 0},
                    {0, 0, 0, 0, 0, 0, 1, 1},
                    {0, 0, 0, 0, 1, 0, 1, 1}}, new int[]{7, 2})
            .expect(2);

    @TestData
    public DataExpectation normal3 = DataExpectation
            .createWith(new int[][]{
                    {1, 0, 0, 0},
                    {0, 1, 0, 0},
                    {0, 0, 1, 1},
                    {0, 0, 1, 1}}, new int[]{3, 1})
            .expect(3);

}
