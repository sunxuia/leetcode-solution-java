package q1950;

import org.junit.runner.RunWith;
import util.runner.Answer;
import util.runner.LeetCodeRunner;
import util.runner.TestData;
import util.runner.data.DataExpectation;

/**
 * [Medium] 1927. Sum Game
 * https://leetcode.com/problems/sum-game/
 *
 * Alice and Bob take turns playing a game, with Alice starting first.
 *
 * You are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the
 * following if there is still at least one '?' in num:
 *
 * Choose an index i where num[i] == '?'.
 * Replace num[i] with any digit between '0' and '9'.
 *
 * The game ends when there are no more '?' characters in num.
 *
 * For Bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second
 * half. For Alice to win, the sums must not be equal.
 *
 * For example, if the game ended with num = "243801", then Bob wins because 2+4+3 = 8+0+1. If the game ended with num =
 * "243803", then Alice wins because 2+4+3 != 8+0+3.
 *
 * Assuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.
 *
 * Example 1:
 *
 * Input: num = "5023"
 * Output: false
 * Explanation: There are no moves to be made.
 * The sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.
 *
 * Example 2:
 *
 * Input: num = "25??"
 * Output: true
 * Explanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.
 *
 * Example 3:
 *
 * Input: num = "?3295???"
 * Output: false
 * Explanation: It can be proven that Bob will always win. One possible outcome is:
 * - Alice replaces the first '?' with '9'. num = "93295???".
 * - Bob replaces one of the '?' in the right half with '9'. num = "932959??".
 * - Alice replaces one of the '?' in the right half with '2'. num = "9329592?".
 * - Bob replaces the last '?' in the right half with '7'. num = "93295927".
 * Bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.
 *
 * Constraints:
 *
 * 2 <= num.length <= 10^5
 * num.length is even.
 * num consists of only digits and '?'.
 */
@RunWith(LeetCodeRunner.class)
public class Q1927_SumGame {

    /**
     * 这题alice 和bob都有最优策略, 可以应用贪婪算法.
     */
//    @DebugWith("normal1")
    @Answer
    public boolean sumGame(String num) {
        int first = 0, second = 0, offset = 0;
        final int len = num.length();
        for (int i = 0; i < len / 2; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                first++;
            } else {
                offset += c - '0';
            }
        }
        for (int i = len / 2; i < len; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                second++;
            } else {
                offset -= c - '0';
            }
        }

        return alice(first, second, offset);
    }

    private boolean alice(int first, int second, int offset) {
        if (first == 0 && second == 0) {
            return offset != 0;
        }

        boolean res;
        if (offset > 0) {
            if (first > 0) {
                res = !bob(first - 1, second, offset + 9);
            } else {
                res = !bob(first, second - 1, offset)
                        || offset <= 9 && !bob(first, second - 1, offset - 9);
            }
        } else {
            if (second > 0) {
                res = !bob(first, second - 1, offset - 9);
            } else {
                res = !bob(first - 1, second, offset)
                        || offset >= -9 && !bob(first - 1, second, offset + 9);
            }
        }

        return res;
    }

    private boolean bob(int first, int second, int offset) {
        if (first == 0 && second == 0) {
            return offset == 0;
        }

        boolean res;
        if (offset > 9) {
            res = second > 0 && !alice(first, second - 1, offset - 9);
        } else if (offset > 0) {
            res = second > 0 && !alice(first, second - 1, 0);
        } else if (offset == 0) {
            if (first > 0) {
                res = !alice(first - 1, second, 0);
            } else {
                res = !alice(first, second - 1, 0);
            }
        } else if (offset >= -9) {
            res = first > 0 && !alice(first - 1, second, 0);
        } else {
            res = first > 0 && !alice(first - 1, second, offset + 9);
        }
        return res;
    }

    /**
     * leetcode 上比较快的解法.
     */
    @Answer
    public boolean sumGame2(String num) {
        final int n = num.length();
        int q = 0, d = 0;
        for (int i = 0; i < n; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                q += 2 * i < n ? 1 : -1;
            } else {
                d += (2 * i < n ? 1 : -1) * (c - '0');
            }
        }
        return (q & 1) > 0 || q * 9 + 2 * d != 0;
    }

    @TestData
    public DataExpectation example1 = DataExpectation.create("5023").expect(false);

    @TestData
    public DataExpectation example2 = DataExpectation.create("25??").expect(true);

    @TestData
    public DataExpectation example3 = DataExpectation.create("?3295???").expect(false);

    @TestData
    public DataExpectation normal1 = DataExpectation
            .create("?0?3105????1834??7382?997?3?????7?63116?566?701?065?13?3??38?7?488?????9")
            .expect(false);

    @TestData
    public DataExpectation overTime1() {
        // @formatter:off
        return DataExpectation.create("6909?98?758?37825650116421242185?1804??7????488526???205?97?37?97682?205111?721?5665?1355??427003?964?13917883?6936?8188076455?9255?7??74?358843551675?78119?41549250941522723599?579?5530?8847?4327?15842?8?3??0858?147692175?9??8122?38134?9129??99004?6084341267?9?56?81317??066??93?877183?507781255693818891?655??880277?8?9299889751907939292?9376?38723585?8847??834?55418620177??44?93?8??151?8?73509?0?2620495782735?4?59??6811??5?434494314?8153??29673?175908?8??81?7802698460?1610742?5768?1?62?0766??5?3093?109363324?59323409?80656?6?7??2068233158?49038?343?7?3356845715?503?4962?39?84722?7?0006??2370970808806?12??856573?1168027510??704920?2123652806?59607386?693122510742278605196468?8?2?47?24414?931?056762535?57366138?0346232677688591?206604?893578?0161?47?77754152?2287?2?69?963?1125?17566159?91?1?1?269?628?24??7002?8777293034?981188731?0411??56?2??9892498202???37?46164750716?344827010276??2145?6310?1?370121?11522?8025??931?955??1?9903934363985295219030886182113?594336794?0?25822154197809?211?00?76??83351582?014580399?57?3?635561?372136798?196??4654?3?1?27683441?9323604?6837203??594032500?67623?4299?78042330585862534753?3?8362??5959?38200?3809??2022816142?7293242?99253121?5?503?5107275673?14515?2859026?13?844?097?5647?0??116716?62074?92189?0889?46889?7?????66??4166580966??919454790?6?905?755473?74933758?46?92??375?581377?952100?3???607??0?94673499059411444??395?74609?37822128?1?365977997?1862??67?272073?21?66708?08?0??4?69204886?73?0????9256800017142?4149?1941338?62835?017?813471?45102?5915?6766?22677?6927604093896?5290?727348?63791710608198350?59771?54812219??6?310178?006722?69863642?9453??42?818964016?0?24?4?07936?4668037?99??7?2?1044??4522997818??12865??54?8817?9?51448870381?81??1?62701289?676010105141767?3?8258209684?38????4?207111?75??41?75429525??427748212310099?887?6?4?8150?222?9?533433570584826986?657022?83???93577?20?29??0222694397??9?2827936?0?821?9081286606?69127?484?0886?61?94654387?87452323680?02914?106892734?98?25?245630149533602888588467?79746??6803158?534??3??3???5?17005597?43287052170395924?7526?567?234?63??0?7?874962377458565392587642?691235467972?2?1??1180819?63?7??205747?2998473754?08?487469?8386??6?1394432?1947?0?82420?27?67752417??61?7?31365?81730?35296?0721??15021?387?620747?257928?4878299?16?7246180??37?0689031310859811?136??3281562?65?958569?8?857040203?0889?05??53?499?529906056300859?8??698342?198466??8?6393?45165350299?0??2132017033?889?684?4?47141438591??7034725534404??6?69?32458???8??8?2218225672?2?94933?57?95?72???643??2953695998870?8060?747?4027828?6729?15?17169?80?9????644?2?907893?7619348?2?5294112?99290451842488??091965892987?331736053344851590??5722870458351?0629215413734?53708??7428??78001714933?4512?19835529??457271062994319?7773??46?57117259?11847933265?698??919512699503?0??8693?445996?08054395663?2?66?2?126?27628863?993485071724881?1995077554?9909?0941?14?441225?3201?2632?540?648?64?64681595446335?800115?4?019?1129?24145246542136?1?6?140140204?607613618561814??036513?39?68770001?7230?093?247211933559239?14?28?30?92702962??86??029468??898330?27??04?49002?71395335?333776??7?5?34?294?76?39?28?67?746??6320070877386??4?04?907?27150699?9051595213?319??58415787875316?121?2?062574?0?5959879?2350?4224?????09?42?05?72407?5?8579?710?109?559?8?317835906?554571?64?6?92?759166?72??4744830?416?317999418020?7?2460413?9?54585?2475?3?3?98171?74295?03???2??6170?097410133?0295?9?9103?20379?1?63311125817674366?727681?61?5?3637945974?147??110?929187?788806657024?6?617878?049940925066553??911280684706697375?46?13446?115186?1865?69728?7?4998?7???6")
                .expect(true);
        // @formatter:on
    }

    @TestData
    public DataExpectation overTime2() {
        // @formatter:off
        return DataExpectation.create("9???06?913?09?810796?4??96????7??3?79?4??5??772?7???8?5?3??2??4??2?6?4??25?0??6?4??207??6?8?3???????6?2?????53???6?6?6?77??7?6?7?55??5?62????8?33???3??39395????7????8?6543?6?27187?4??96????0?33582???6??862?703?692?4926?9?32?65?73?2759?980111??0?0?05???155?323???415????95?9???77?5244?18?2?2261?89628?87???4312?710?26???7??????6?7?20??9579????????9?2707??9?551???5?12294????6?21??3??54??1?59????????7?09?9?62?????5???438?4?80??75?2?0?3??4?476?5?0??4?71?5??????8?0290?904637?6?6??04????6?5???5??8??6??65254???8?3?74?4????17??1????5?8??1021?3?12??51?293??11?00591???29?7?519?????????1?023????12???110?63??30?1??658373????79??2???7?490???728??0????1????2???3428??93?1?1?????3??25?3???????2694?96???8?????436????4?53?804?4??21?0?????1?????????7509???6???17?0??1?595?9??19?4??5?7?5757??4??7?5?83??3?92?0???5????6?7??7???5??6???77722?6???6?02?5?6265?0??6????229??????????2??310?67?2???4???5?30?76???2??4?8433?797??6?6???270???5?1?15?794238??7??36?7??04254?????9?6919?2?8?4?5?525971075633?53574?8?5?953??2???5????93?99?3??3?79??705?81?62?9????5?18?779?4?1??763??42??5??0?7??????3?305????597??82?4?575???98???3?3?9?91?4??038????84????????3?66?????0????4?4??32400??61?5?72?7?6???829?75??1??4??7??43?97???4???2???9?2?5????01?0?5?8?7525?68???0?65?6??2???5?9?0??4?5???9?9????0??8?02?7??1?????122?18?2?3?1??555???1??6??5?????1?76??8?0???????86?6????28?1?3??72??14??????????33??0?????8?0??0370???0??332285???56?6???0????8470?6??8?10??3?9??03???397051??958??26?328??0?????9448????58??6?239?45?3??546?1?4???7?07??9?86??3??21061???????3???3?9?4????3????9???4???5??7??0?39?4????38040?3?2?5?3??7657??6927?78?9?431??9??1009??00?404?????76921????053?3????65?????1?????4?60??4????01424?7??3?1?072????0?1?1?3?7??984?5???5?9???999?9??999????9????99??9??9??99999??9?????????3???822?311??64?9?1?3???342?4??57?9??889???4?2?????5????6529?0?60?3????2???020?32???6?5097?7???5?396??73?7948???7???1485??5?24????????578?????71?????5?8?????41?5?60????82??137???1??1?8???42?5??47?68?????1????8?2??683?230???358?9?2??9????8???80?????8?58??3?8??????25?2?1??2??93?2?8?9?634??0?64686?775???24??????0???1?4??8?4?3991????06?2?27??236266??9????3??3???5?1342????6??192?3????724?5?0????????1???84?81?9?7374?18?972??15??4???????06?41?76??9???27??????43?8?????119???95?3?7?66?01444?856???45101739739??64178???99?6?9860??9?1919???11???359?9????????6?6?05?????7????7?9???806???6????0392????05???14?6????????0??7?45??5?5?347?0?574?2?38856?52?7?1?5??5??????98???3?5??4?116??59?7?????26?347?5?5?7??52?2??????50139?4?8?8488?2?6?9??1??3?11??9?642??5???????8??56261?4???9???????91?5???370??3824?0733337?320430?9??7?7??????68?89362?8??9??6????96?4???5????4?6?5???5?35???8?512?5389218????7?851??935?8????374????9?079??7????7961?208??????78???0??????572???15?1494???097?6?263?74??8?4?5?3?9862?8????95????0905?9?119???1??????86233??92???2?07151169?6667??2521???4???5?26??4??71??2???4????63351571?8409????08??051?2?08?0056?4??0?9951??23?9?72?8??3?5?1????2?95?9272???82?7?09?08?14???4?15???29?????82?1??739295??786???7??????1?8??15??3?5??23??7??3?6??05????0???7?????918???1?5??899??88?6??????8??34?52?7???3????466??66?1???????7??????07??1????5?879?647???4??080???3??149982??5??08???0????046?358?0???6???????88?2850?3?????1????7??2??3513??739?9?0?0??6?31??40?????35?26???35?60?22?????939??46????94??34?6??066??6???4?3?74??9?0????6??0??72?311127?128?5????2464?8?4???49???41163????1??8?73?28?0??77??1?1306211369?5?7??2??7?9???0??833??5??090?2????5?42??57?3?066??2??4?????81??323????5?7?07?1??3?????9?848???2?28?50?1168809?2??55??0??2?1??3?060")
                .expect(false);
        // @formatter:on
    }

}
